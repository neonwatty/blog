{
  "id": "tfq-test-failure-management",
  "title": "Claude Code Test Debugging Without The Context Overload",
  "slides": [
    {
      "type": "title",
      "title": "Claude Code Test Debugging Without The Context Overload",
      "content": "Jeremy Watt",
      "notes": "Published on 2025-08-31. Tags: Testing, CLI, Claude Code, AI, Context Management, DevTools"
    },
    {
      "type": "content",
      "title": "The Problem",
      "content": "- Projects with large test suites become difficult to debug with Claude Code\n- Easy to hit session context limits with dozens or hundreds of tests\n- Risk of overinflated progress reporting"
    },
    {
      "type": "content",
      "title": "The Problem (cont.)",
      "content": "- Claude may even provide inaccurate test results\n- Context confusion leads to unreliable fixes\n- Difficult to track which tests actually pass"
    },
    {
      "type": "image",
      "title": "Consequences",
      "image": {
        "src": "/slideshow-assets/lies.png",
        "alt": "Claude lying about test results",
        "caption": "Claude can give an overinflated sense of progress or even lie about test results"
      }
    },
    {
      "type": "content",
      "title": "Context Limits",
      "content": "- Natural limitation of context window\n- Doesn't need solving at model level\n- Needs engineered guardrails at IDE/agent level"
    },
    {
      "type": "content",
      "title": "The Solution: tfq",
      "content": "- Simple CLI queueing tool called **tfq**\n- Available on <a href=\"https://www.npmjs.com/package/tfq\" target=\"_blank\">npm</a>\n- Manages test failures systematically"
    },
    {
      "type": "content",
      "title": "tfq Benefits",
      "content": "- Prevents context overload\n- Maintains focus on individual tests\n- Structured approach to debugging"
    },
    {
      "type": "content",
      "title": "What is tfq?",
      "content": "- **Test Failure Queue** - CLI tool for managing failed tests\n- Runs your entire test suite\n- Queues up all failing tests"
    },
    {
      "type": "content",
      "title": "How tfq Works",
      "content": "- Feeds each test individually to Claude Code\n- Each test gets its own headless Claude session\n- Includes failure messages, tracebacks, and imports"
    },
    {
      "type": "content",
      "title": "Key Benefits",
      "content": "- **Per-test context management** - keeps context focused\n- **Faster test fixes** - no wasted time on context switching\n- **Accurate progress** - no confusion about which tests pass"
    },
    {
      "type": "content",
      "title": "Additional Benefits",
      "content": "- **Reliable results** - reduces false positives\n- **Systematic approach** - predictable workflow\n- **Better debugging** - isolated test environments"
    },
    {
      "type": "content",
      "title": "Getting Started",
      "content": "Example: JavaScript calculator app\n\n**Step 1:** Run your test suite with tfq"
    },
    {
      "type": "code",
      "title": "Code Example",
      "code": {
        "language": "bash",
        "content": "# run your project's tests and store failures in the queue\n$ tfq run-tests --auto-detect\nAuto-detected: JavaScript project using Jest\nRunning: npm test\n=============================================\n  PASS  src/utils/validator.test.js\n  PASS  src/services/user.test.js\n  FAIL  src/utils/calculator.test.js\n  FAIL  src/api/auth.test.js\n  FAIL  src/components/Button.test.js\n=============================================\nTest Suites: 3 failed, 2 passed, 5 total"
      }
    },
    {
      "type": "content",
      "title": "Test Results",
      "content": "**3 tests failed:**\n- `src/utils/calculator.test.js`\n- `src/api/auth.test.js`\n- `src/components/Button.test.js`"
    },
    {
      "type": "content",
      "title": "Useful Flags",
      "content": "- **`--auto-detect`** - Automatically detects your language and test framework\n- **`--auto-add`** - Automatically adds failures to tfq queue\n- Supports JavaScript, TypeScript, Python, Ruby"
    },
    {
      "type": "content",
      "title": "View Your Queue",
      "content": "- Check your queued failing tests\n- Simple tfq list command\n- Shows all tests in queue"
    },
    {
      "type": "code",
      "title": "Code Example",
      "code": {
        "language": "bash",
        "content": "# see all failed tests currently in the queue\n$ tfq list\nQueue contains 3 file(s):\n1. src/utils/calculator.test.js (1 failure)\n2. src/api/auth.test.js (1 failure)\n3. src/components/Button.test.js (1 failure)"
      }
    },
    {
      "type": "content",
      "title": "Queue Management Commands",
      "content": "- **`clear`** - Remove tests from queue\n- **`resolve`** - Mark tests as resolved\n- **`group`** - Organize related tests"
    },
    {
      "type": "content",
      "title": "Learn More",
      "content": "- Full documentation on GitHub\n- <a href=\"https://github.com/neonwatty/tfq\" target=\"_blank\">Visit the repository</a>\n- Open source and contributions welcome"
    },
    {
      "type": "content",
      "title": "Fixing Tests with Claude",
      "content": "- **Step 2:** Automated test fixing\n- Let Claude Code handle repairs\n- Fully automated workflow"
    },
    {
      "type": "content",
      "title": "Claude Integration",
      "content": "- tfq automatically integrates with Claude Code\n- Creates config file on initialization\n- Ports over all Claude Code options"
    },
    {
      "type": "content",
      "title": "Automated Testing",
      "content": "- Enables headless mode for automated fixes\n- No manual intervention required\n- Runs in background seamlessly"
    },
    {
      "type": "code",
      "title": "Configuration File Example",
      "code": {
        "language": "json",
        "content": "{\n  \"claude\": {\n    \"enabled\": true,\n    \"maxIterations\": 10,\n    \"testTimeout\": 300000,\n    \"prompt\": \"Run the test file at {testFilePath}...\",\n    \"allowedTools\": [\"Edit\", \"Read\", \"Write\"]\n  }\n}"
      }
    },
    {
      "type": "content",
      "title": "Test Parameters",
      "content": "- `maxIterations: 10` - Max attempts per test\n- `testTimeout: 300000` - 5 minute timeout\n- Fully configurable for your needs"
    },
    {
      "type": "content",
      "title": "Prompt Template",
      "content": "- Uses `{testFilePath}` placeholder\n- Instructs Claude to debug errors one at a time\n- Verifies fixes by re-running tests"
    },
    {
      "type": "content",
      "title": "Security Settings",
      "content": "- `dangerouslySkipPermissions: true`\n- `allowedTools: [\"Edit\", \"Read\", \"Write\"]`\n- Full customization like command line"
    },
    {
      "type": "content",
      "title": "Automatic Path Resolution",
      "content": "- `{testFilePath}` resolves automatically\n- Provides absolute path to next failed test\n- No manual path configuration needed"
    },
    {
      "type": "code",
      "title": "Code Example",
      "code": {
        "language": "bash",
        "content": "# fix your next failed test in the queue using headless claude code\ntfq fix-next"
      }
    },
    {
      "type": "content",
      "title": "How fix-next Works",
      "content": "- The `tfq fix-next` command\n- Performs automated steps\n- Sequential test processing"
    },
    {
      "type": "content",
      "title": "fix-next Process (Part 1)",
      "content": "1. **Dequeues** next failed test from queue\n2. **Provides** absolute path to Claude with your config\n3. **Runs** Claude Code in <a href=\"https://docs.anthropic.com/en/docs/claude-code/sdk/sdk-headless\" target=\"_blank\">headless mode</a>"
    },
    {
      "type": "content",
      "title": "fix-next Process (Part 2)",
      "content": "4. **Re-tests** after Claude's fix\n5. **Re-queues** if test still fails\n6. **Continues** to next test in queue"
    },
    {
      "type": "content",
      "title": "Batch Processing",
      "content": "- Fix all tests sequentially\n- Single command operation\n- Automated batch processing"
    },
    {
      "type": "code",
      "title": "Code Example",
      "code": {
        "language": "bash",
        "content": "# fix each failed test in the queue sequentially using headless claude code\ntfq fix-all"
      }
    },
    {
      "type": "content",
      "title": "Summary",
      "content": "- **Simple but effective** - No magic, just good engineering\n- **Structured approach** - Manages context systematically\n- **Ordered processing** - One test at a time"
    },
    {
      "type": "content",
      "title": "Final Thoughts",
      "content": "- **Better results** - More reliable test fixes\n- **Time saver** - Reduces debugging time significantly\n- **Try it out** - <a href=\"https://www.npmjs.com/package/tfq\" target=\"_blank\">npm install -g tfq</a>"
    }
  ],
  "metadata": {
    "author": "Jeremy Watt",
    "date": "2025-08-31",
    "tags": [
      "Testing",
      "CLI",
      "Claude Code",
      "AI",
      "Context Management",
      "DevTools"
    ],
    "totalSlides": 35,
    "generatedAt": "2025-09-01T21:45:54.436Z",
    "sourcePost": "tfq-test-failure-management"
  }
}